Shell语法解释特殊符号 # %


##和%%表示最长匹配，#和%表示最短匹配。键盘上#在%前面，所以#是对左边部分处理，%是对右边部分处理。


%解释
在Bash中,为符号通常表示删除字符串的后缀。具体来说,${var%pattern}表示从变量$var的结尾删除匹配模式pattern的子
串,并返回删除后的字符串。
例如,如果$namebin的值为file.bin,那么${namebin%.bin}的结果就是file,因为它删除了$namebin变量结尾的.bin后L
缀。
需要注意的是,为符号只会删除一个匹配模式,如果变量结尾有多个匹配模式,只会删除最后一个匹配模式。另外,, 符号还可以与
%符号连用,表示删除最长匹配模式的后缀。


#解释
在Bash中,#符号通常表示删除字符串的前缀。具体来说,${var#pattern}表示从变量$var的开头删除匹配模式pattern的子
串,并返回删除后的字符串。
例如,如果$srcbin的值为/path/to/file.bin,那么${srcbiin#*/}的结果就是path/to/file.bin,因为它删除了$srcbin变
量开头的/及其之前的所有字符。
需要注意的是,#符号只会删除一个匹配模式,如果变量开头有多个匹配模式,只会删除第一个匹配模式。另外,#符号还可以与 #
符号连用,表示删除最长匹配模式的前缀。


$解释
在Bash中,$符号通常表示变量,用于引用变量的值。例如,$name表示变量 name的值。
在某些情况下,为了避免变量名与其他字符混淆,可以使用$符号来界定变量名的边界。例如,$namebin和${namebin}都表示变量
namebin的值,但是在$namebin中,$符号界定了变量名的边界,使得Bash可以正确解释变量名。另外,${namebin%.bin}中的
$符号也是用来界定变量名的边界,表示${namebin}和.bin是两个独立的字符串,而不是一个字符串。
需要注意的是,在某些情况下,$符号也可以用于转义 特殊字符,例如$'\'n'表示换行符,$'\'t'表示制表符 等。






***** 注意 if 判断中对于变量的处理,需要加引号,以免一些不必要要的错误。没有加双引号会在一些含空格等的字符串变量判断的时候产生错误。比如[ -n "$var" ]如果var为空会出错
```
#!/bin/sh

var="" 

if [ -n $var ]; then echo "not empty"; else echo "empty"; fi;       ## 输出了 not empty
if [ -n "$var" ]; then echo "not empty"; else echo "empty"; fi;		## 输出了 empty
if [[ -n $var ]]; then echo "not empty"; else echo "empty"; fi;		## 输出了 empty
```

pid="12345"
[ -z "$pid" ] 单对中括号,变量必须加双引号
[[ -z $pid ]] 双对中括号,变量不用加双引号


***** 注意 空变量和没有初始化的变量 可能会对shell脚本测试产生灾难性的影响, 因此在不确定变量的内容的时候, 在测试号前使用-n或者-z检测

= 	检测两个字符串是否相等，相等返回 true。 	[ $a = $b ] 返回 false。
!= 	检测两个字符串是否不相等，不相等返回 true。 	[ $a != $b ] 返回 true。
-z 	检测字符串长度是否为0，为0返回 true。 	[ -z $a ] 返回 false。
-n 	检测字符串长度是否不为 0，不为 0 返回 true。 	[ -n "$a" ] 返回 true。
$ 	检测字符串是否不为空，不为空返回 true。 	[ $a ] 返回 true。




##### And/Or #####

&& , -a 
|| , -o

[[ ]] 条件判断 &&、|| , 也可放外面
[[ ]] 双对中括号, 不能使用 -o 和 -a 的参数
[[ ]] 正则判断(=~/==)只能双对中括号, i.e.  tel=1368888888888; [[ $tel =~ [0-9]{11} ]]

[ ] 条件判断 -a 、 -o , 只能里面 i.e. [ 5 -gt 3 -a 3 -lt 5 ]
[ ] 条件判断 &&、|| 需要在外面, i.e. [ 5 -gt 3 ] && [ 3 -lt 5 ]


逻辑判断
[ ! EXPR ] 逻辑非,如果EXPR是false则返回为真
[ EXPR1 -a EXPR2 ]逻辑与,如果 EXPR1 and EXPR2全真则返回为真
[ EXPR1 -o EXPR2 ]逻辑或,如果 EXPR1 or EXPR2 为真则返回为真
[] || [] 用OR来合并两个条件
[] && [] 用AND来合并两个条件










###### 正则 ######
https://www.cnblogs.com/OwlInTheOaktree/p/16218714.html

(?s)  在正则前面加这个 ------> 则 Dot All 匹配多模式
(?i)  不区分大小写




