
# 1. Download Flutter Sdk and Unzip it

https://docs.flutter.dev/development/tools/sdk/releases


mkdir $W_PATH/Flutter_Sdk ; cd $W_PATH/Flutter_Sdk
curl -O https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_2.10.1-stable.tar.xz
curl -O https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_2.8.1-stable.tar.xz

xz -d -k flutter_linux_2.10.1-stable.tar.xz    # 解压 .xz 并保留原文件
tar xvf flutter_linux_2.10.1-stable.tar
# or just use `tar xf flutter_linux_2.10.1-stable.tar.xz`
mv flutter flutter_linux_2.10.1-stable
rm flutter_linux_2.10.1-stable.tar


# 2. run `flutter precache`
pushd flutter_linux_2.10.1-stable/bin && ./flutter precache && popd


## one command at all:
FluVer=2.8.1
tar xf flutter_linux_${FluVer}-stable.tar.xz && mv flutter flutter_linux_${FluVer}-stable && pushd flutter_linux_${FluVer}-stable/bin && ./flutter precache && popd
FluVer=2.10.1
tar xf flutter_linux_${FluVer}-stable.tar.xz && mv flutter flutter_linux_${FluVer}-stable && pushd flutter_linux_${FluVer}-stable/bin && ./flutter precache && popd



# 3. Setup PATH env

vim ~/.bash_aliases
-----------------------------------
# Flutter
export CHROME_EXECUTABLE=/snap/bin/chromium  # for Linux
# PATH=$PATH:$W_PATH/Flutter_Sdk/flutter_linux_2.8.1-stable/bin
PATH=$PATH:$W_PATH/Flutter_Sdk/flutter_linux_2.10.1-stable/bin
-----------------------------------


touch ~/.android/repositories.cfg
sdkmanager --update

flutter doctor       ## export ANDROID_SDK_ROOT, to you android sdk path, need export!!!
flutter doctor --android-licenses
flutter --version




# 4. In Android Studio Plugin, search 'flutter' & 'dart' then download this two plugins






################################ 获取 Flutter engine (Flutter.framework) 的 DSYM ################################ 

echo "https://storage.cloud.google.com/flutter_infra_release/flutter/$(cat ${$(which flutter)%bin*}/bin/internal/engine.version)/ios-release/Flutter.dSYM.zip"


# 1. iOS Flutter 引擎 Crash 方法符号
# https://www.jianshu.com/p/97901a3f29eb
Flutter_DSYM=__your_unzip_dsym_path__
xcrun atos -o $Flutter_DSYM/Contents/Resources/DWARF/Flutter --arch arm64 -offset 0x043858
# xcrun atos -o Flutter.dSYM/Contents/Resources/DWARF/Flutter --arch arm64 -l 0x107278000



# 2. 上传 sentry
brew install getsentry/tools/sentry-cli 
export SENTRY_URL=https://io.sentry.com/
sentry-cli debug-files upload --auth-token [SENTRY_AUTH_TOKEN] \
--include-sources \
--org [SENTRY_ORG] \
--project [SENTRY_PROJECT] \
/__path_to_your_downloaded_dsym_zip_file__/flutter_9aa7816315095c86410527932918c718cb35e7d6_ios-release_Flutter.dSYM.zip 













################################ Build a new flutter_tools.snapshot  ################################


__path_to__/flutter_macos_2.0.4-stable/bin/cache/dart-sdk/bin/dart --verbosity=error --disable-dart-dev  --snapshot=__path_to__/flutter_macos_2.0.4-stable/bin/cache/flutter_tools_new.snapshot --packages=__path_to__/flutter_macos_2.0.4-stable/packages/flutter_tools/.packages --no-enable-mirrors __path_to__/flutter_macos_2.0.4-stable/packages/flutter_tools/bin/flutter_tools.dart


# 1. Debugging flutter_tools:

https://www.alibabacloud.com/blog/an-in-depth-understanding-of-flutter-compilation-principles-and-optimizations_597747

# 1.1 Add `Dart Command Line App` in `Run/Debug Configuration` menu -> in [Dart file]: select the `bin/flutter_tools.dart`


# 1.2 In [Program arguments], fill with:
	`run --device-id=macos --project-root=__path_to_your_project_/ --target=__path_to_your_project_/lib/main.dart`

	i.e.
		run -d [__device_id__] --project-root=__path_to_your_project_ --target=__path_to_your_project_/lib/main.dart --flavor development --dart-define=App.env=test --dart-define=App.experiment=true --dart-define=App.phase=DEV

	# [__device_id__] values: `flutter devices`


# 1.3 Click 'OK', save configuration and exit

# 1.4 Modify the `lib/src/resident_runner.dart` source Line 404, (for version flutter_macos_3.0.5-stable), insert below code to change the `globals.fs.currentDirectory` to our specified in `--project-root` arguments:
	
	globals.fs.currentDirectory = globals.fs.directory(hotRunner.projectRootPath);

	## 原因在于后面调用的 FlutterProject.current() 依然取 globals.fs.currentDirectory 为 pwd 的路径，并不取 --project-root 参数传入的。
	## 另外还有 lib/src/runner/flutter_command.dart 的 verifyThenRunCommand 调的 await validateCommand() 方法里检查的 globals.fs.isFileSync('pubspec.yaml') 也还是 pwd 路径的 「pubspec.yaml」是否存在，并不是拿 --project-root 的。
	## 所以感觉 --project-root 的支持并不完善/完美。

# 1.5 Modify the `lib/src/base/logger.dart` source Line 550, 输出更多日志信息:
    @override
  	void printTrace(String message) => _stdio.stdoutWrite('$message\n');







################################ Run flutter project from android app project  ################################

## In your android project: 
## Pass the dart-define arguments on build:

Run/Debug Configurations -> Before launch -> '+' a task below 'Gradle-aware Make' -> Gradle project: android:app,  Tasks: assembleDevelopmentDebug,  Arguments: -Pdart-defines=app.env%3Dproduction,app.experiment%3Dtrue,app.phase%3DDEV







################################ Debug flutter project's gradle file: flutter.gradle  ################################

// https://stackoverflow.com/a/63550785/1749293
// https://docs.gradle.org/current/userguide/troubleshooting.html#sec:troubleshooting_build_logic

## In your android project:

Run/Debug Configurations -> "+" -> Remote JVM Debug -> Enter a random Name for example: "Remote Debug Gradle", and leave other settings default -> "OK"

fn + option + F12 key open Terminal -> cd android -> ./gradlew assembleDevelopmentDebug -Pdart-defines=xdragon.env%3Dproduction,xdragon.experiment%3Dtrue,xdragon.phase%3DDEV -Dorg.gradle.debug=true --no-daemon -> Click the 'Debug' icon on toolbar on android studio to attach.

Then wait a minute, the debuger will stop on your breakpoints you've set up.



################################ 那么同理，纯 Android App/Module 项目的 Debug Gradle ################################

Android Studio - Run/Debug Configurations -> "+" -> Remote JVM Debug -> Enter a random Name for example: "Remote Debug Gradle", and leave other settings default -> "OK"

fn + option + F12 key open Terminal -> cd android -> ./gradlew assembleDevelopmentDebug -Dorg.gradle.debug=true --no-daemon --stacktrace -> Click the 'Debug' icon on toolbar to attach ( Notice that is clicking 'Debug' button, not the 'Attach' process button ).









################### Flutter lib ###################
// Android Studio -> New Flutter Project -> Porject Type 选择 Plugin ， 出来的项目里已经包含 example 子项目
// 但这时，外层了 lib 的 ios XxxPlugin.m/h 或者 android XxxPlugin.java 就不好写了，会没了编译及自动提示填充等

iOS:
## 第一种方式:
// 用 XCode 打开 example/ios/ 目录下的工程 Runner.xcworkspace 就好，注意pod install，注意一路展开Pods下面的 库名 -> ../.. -> example -> ios -> .symlinks -> plugins -> 库名 -> ios/Classes OK就可以好好写代码了
(这里注意如果 pod install,  s.dependency 'Xlightweight-Store-iOS' 的 `pod repo update` or with `pod install --repo-update` 都没有，在 example 的 podfile 里显示指定一下 pod git url & commit 再 pod install 一下)


## 第二种方式:
// 这时把 example下的 ios/目录的 Flutter/ & Runner/ & Runner.xcodeproj & Runner.xcworkspace & Podfile 都拷过来

// 然后 pod install 一下，打开 Runner.xcworkspace ，拖入 XxxPlugin.m/h 所在的 Classes 源码，就能愉快的写了

// 弄个干净的 Podfile 是新的也行，pod isntall 后要改两个地方: 
1. Runner -> PROJECT Runner -> Info (在Build Settings左侧) -> Configurations -> Debug/Relase/Profile 都修改成对应的 Pods-Runner.debug/release/profile
2. Runner -> TARGETS Runner -> Build Phases -> 在 Run Script & Thin Binary 脚本的第一行都export FLUTTER_ROOT 指向的 flutter sdk 路径 如:
export FLUTTER_ROOT=$HOME/Workspaces/FlutterSDK/flutter_macos_3.7.8-stable/

Android:
## 第一种方式:
// 用 Android Studio 打开 example/android/ 目录就好，然后有引用到外面库的 android 目录的 XxxPlugin.java 源码，这样编写就好
## 第二种方式:
// Android 的话用 Android Studio 另打开 android/ 目录就好，build.gradle 写好 maven 地址 及 dependencies, 点一下 大象 下载同步 后 Make 一下就好
// 但 Flutter 相关的类标红了 找不到， 后面看看



################### 发布到 pub.dev ###################

README.md         // 介绍
pubspec.yaml      // 库名、版本、描述、环境版本、依赖
LICENSE   	      // MIT License
CHANGELOG.md      // 版本历史


## 发布 dart 库到 pub.dev

dart format .
dart pub publish --dry-run 
dart pub publish 



## 发布 Flutter 库到 pub.dev

dart format . -l 138
flutter pub publish --dry-run 
flutter pub publish 



















____________________________________________________ Build Dart SDK ____________________________________________________

// 1. FIRST BUILD

https://github.com/dart-lang/sdk/blob/main/docs/Building.md

# if not have depot_tools in PATH:
git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
export PATH="$PATH:$PWD/depot_tools"


# get the source
mkdir dart-sdk ; cd dart-sdk ; fetch dart


# build the source
cd sdk 
./tools/build.py --mode release --arch x64 create_sdk

# build output will locate in: xcodebuild/ReleaseX64/dart-sdk # 2024-05-23: 环境 macOS 14.5 + Xcode 15.3 一次性编译成功




// 2. BUILD WITH SPECIFIED VERSION. i.e. build tag name 2.19.5

cd sdk
git tag --list | grep 2.19.5
git checkout -b v2.19.5 2.19.5
less DEPS
gclient sync -D
./tools/build.py --mode release --arch x64 create_sdk



----------------------------------------------- 错误 -----------------------------------------------
xpel@Xpens-iMac sdk % ./tools/build.py --mode release --arch x64 create_sdk
Generating Xcode projects took 48ms
Done. Made 345 targets from 89 files in 2207ms
buildtools/ninja/ninja -C xcodebuild/ReleaseX64 create_sdk
ninja: Entering directory `xcodebuild/ReleaseX64'
[303/3271] CXX obj/runtime/bin/standalone_dart_io.security_context_macos.o
FAILED: obj/runtime/bin/standalone_dart_io.security_context_macos.o 
../../buildtools/mac-x64/clang/bin/clang++ -MMD -MF obj/runtime/bin/standalone_dart_io.security_context_macos.o.d -DTOOLCHAIN_VERSION=pi_zOuxaxIOJ5lf-CkO_qSEq0htHvAiq0dRamA2RjQ8C -DNDEBUG -DTARGET_ARCH_X64 -DDART_TARGET_OS_MACOS -I../../runtime -I../../third_party -I../.. -Igen -I../../runtime/include -I../../third_party/zlib -I../../third_party/boringssl/src/include -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.4.sdk -mmacosx-version-min=10.13  -arch x86_64 -fcolor-diagnostics -Wall -Wextra -Werror -Wendif-labels -Wno-missing-field-initializers -Wno-unused-parameter -Wno-tautological-constant-compare -Wno-unused-but-set-variable -Wno-deprecated-non-prototype -Wpartial-availability -fdebug-prefix-map=/Users/xpel/Workspaces/GoogleOpenSource/dart-sdk/sdk=../.. -no-canonical-prefixes -stdlib=libc++ -Wheader-hygiene -Wstring-conversion -O3 -fno-ident -fdata-sections -ffunction-sections -g3 -ggdb3 -Werror -Wall -Wextra -Wno-unused-parameter -Wno-unused-private-field -Wnon-virtual-dtor -Wvla -Woverloaded-virtual -Wno-comments -g3 -ggdb3 -fno-rtti -fno-exceptions -Wimplicit-fallthrough -fno-strict-vtable-pointers -O3 -fvisibility-inlines-hidden -fno-omit-frame-pointer -std=c++17 -fno-rtti -c ../../runtime/bin/security_context_macos.cc -o obj/runtime/bin/standalone_dart_io.security_context_macos.o
../../runtime/bin/security_context_macos.cc:188:17: error: use of undeclared identifier 'noErr'
  if (status != noErr) {
                ^
../../runtime/bin/security_context_macos.cc:196:19: error: use of undeclared identifier 'noErr'
    if (status != noErr) {
                  ^
../../runtime/bin/security_context_macos.cc:205:17: error: use of undeclared identifier 'noErr'
  if (status != noErr) {
                ^
../../runtime/bin/security_context_macos.cc:303:21: error: use of undeclared identifier 'noErr'
  OSStatus status = noErr;
                    ^
../../runtime/bin/security_context_macos.cc:319:23: error: use of undeclared identifier 'noErr'
            status == noErr && (trust_result == kSecTrustResultProceed ||
                      ^
5 errors generated.
[316/3271] OBJCXX obj/runtime/bin/standalone_dart_io.platform_macos_cocoa.o
ninja: build stopped: subcommand failed.
BUILD FAILED
----------------------------------------------- 错误 -----------------------------------------------

# https://juejin.cn/post/7364698043910930443 ，这篇文章的解决方法是换掉 /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/TargetConditionals.h 成旧的 MacOSX13.3.sdk 的 /usr/include/TargetConditionals.h ， 注意备份。

# 我的方法临时换一Xcode版本(也即换了sysroot及对应的编译工具链了), 用 Xcode 15.0.1 版本就可以了:

mdfind "kMDItemCFBundleIdentifier = 'com.apple.dt.Xcode'"
sudo xcode-select -s /Users/xpeng/Workspaces/Softwares/Xcodes/Xcode_15.0.1.app


# 然后重新编译，最后一切OK:
./tools/build.py --mode release --arch x64 create_sdk







