

https://source.android.com/setup/build/downloading
https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/
https://source.android.com/setup/start/build-numbers#source-code-tags-and-builds
https://source.android.google.cn/setup/start/build-numbers#source-code-tags-and-builds
https://developers.google.cn/android/drivers
https://developers.google.com/android/drivers
https://storage.googleapis.com/play_public/supported_devices.html

# 编译在模拟器运行请看:
https://source.android.com/docs/setup/create/avd?hl=zh-cn



mkdir Google && cd Google




################################### android-9.0.0_r42 ###################################

mkdir android-9.0.0_r42 && cd android-9.0.0_r42

mkdir .repo && cp -r ../android-9.0.0_r57/.repo/repo ./.repo/

repo init -u https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest -b android-9.0.0_r42

./ReRepoSync.sh



# According https://source.android.com/setup/start/build-numbers#source-code-tags-and-builds, we got 
# android-9.0.0_r42 的 Build ID is PQ3B.190605.006 , so go to https://developers.google.cn/android/drivers#sargopq3b.190605.006, then 
# search PQ3B.190605.006 and download:

mkdir -p $HOME/Disk6T/Workspaces/Resources/sargo_Pixel3a/
cd $HOME/Disk6T/Workspaces/Resources/sargo_Pixel3a/
curl -O https://dl.google.com/dl/android/aosp/google_devices-sargo-pq3b.190605.006-cdb783e8.tgz
curl -O https://dl.google.com/dl/android/aosp/qcom-sargo-pq3b.190605.006-dc3c5790.tgz
tar zxvf google_devices-sargo-pq3b.190605.006-cdb783e8.tgz
tar zxvf qcom-sargo-pq3b.190605.006-dc3c5790.tgz
./extract-google_devices-sargo.sh
./extract-qcom-sargo.sh

mv vendor/ $HOME/Disk6T/Workspaces/AOSP/Google/android-9.0.0_r42



source build/envsetup.sh

lunch aosp_sargo-userdebug

make update-api

make


# For Android Studio:
mmm development/tools/idegen/
development/tools/idegen/idegen.sh  # open android.ipr [setting for android.iml] in Android Studio



# 刷机到 Pixel 3a : 
echo $ANDROID_PRODUCT_OUT  # 如果没有请设置, 注意要用 export，直接=不行，环境变量没带到环境中去
export ANDROID_PRODUCT_OUT=$HOME/Disk6T/Workspaces/AOSP/Google/android-9.0.0_r42/out/target/product/sargo/
adb reboot bootloader
fastboot flashing unlock   # fastboot oem unlock
fastboot flashall -w


adb disable-verity



# 制件刷机包zip, # Package OTA: out/target/product/sargo/aosp_sargo-ota-eng.ubuntu.zip
make otapackage

# 制件刷机增量包zip
./build/tools/releasetools/ota_from_target_files -v -i out/target/product/sargo/aosp_sargo-ota-eng.ubuntu_last.zip out/target/product/sargo/aosp_sargo-ota-eng.ubuntu_now.zip out/target/product/sargo/oat_incremental.zip

adb push aosp_sargo-ota-eng.ubuntu.zip /cache/
echo "--update_package=/cache/aosp_sargo-ota-eng.ubuntu.zip" > /cache/recovery/command
# adb push oat_incremental.zip /cache/
# echo "--update_package=/cache/oat_incremental.zip" > /cache/recovery/command

adb reboot recovery












################################### android-9.0.0_r57 ###################################

git config --global http.proxy 'socks5://127.0.0.1:1090'
git config --global https.proxy 'socks5://127.0.0.1:1090'


mkdir android-9.0.0_r57 && cd android-9.0.0_r57

repo init -u https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest -b android-9.0.0_r57


git config --global --unset http.proxy
git config --global --unset https.proxy

./ReRepoSync.sh


source build/envsetup.sh

lunch aosp_taimen-userdebug

make update-api

make




----------------------------------------------------------------------------
FAILED: out/soong/build.ninja 
out/soong/.bootstrap/bin/soong_build -t -l out/.module_paths/Android.bp.list -b out/soong -n out -d out/soong/build.ninja.d -o out/soong/build.ninja Android.bp
error: bionic/libc/system_properties/Android.bp:1:1: dependency "libjson" of "libsystemproperties" missing variant:
  arch:android_arm64_armv8-a_cortex-a73, image:core, link:static
available variants:
  arch:android_arm64_armv8-a_cortex-a73, image:vendor, link:static
  arch:android_arm_armv8-a_cortex-a73, image:vendor, link:static
ninja: build stopped: subcommand failed.
22:24:29 soong bootstrap failed with: exit status 1
----------------------------------------------------------------------------
vim external/json-c/Android.bp
## 加上: 
vendor_available: true,
## 如果有 vendor: true, 则删掉



----------------------------------------------------------------------------
FAILED: out/soong/build.ninja 
out/soong/.bootstrap/bin/soong_build -t -l out/.module_paths/Android.bp.list -b out/soong -n out -d out/soong/build.ninja.d -o out/soong/build.ninja Android.bp
error: frameworks/base/core/jni/Android.bp:11:1: dependency "sandhook" of "libandroid_runtime" missing variant:
  arch:android_arm64_armv8-a_cortex-a73, image:core, link:static
available variants:
  arch:android_arm64_armv8-a_cortex-a73, image:vendor, link:static
  arch:android_arm_armv8-a_cortex-a73, image:vendor, link:static
ninja: build stopped: subcommand failed.
22:18:35 soong bootstrap failed with: exit status 1
----------------------------------------------------------------------------
vim external/sandhook/Android.bp
## 如果有 vendor: true, 则删掉，替换或加上:
vendor_available: true,
















################################### android-10.0.0_r41 ###################################

mkdir android-10.0.0_r41 && cd android-10.0.0_r41

mkdir .repo && cp -r ../android-9.0.0_r57/.repo/repo ./.repo/ && cp ../android-9.0.0_r57/ReRepoSync.sh ./

repo init -u https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest -b android-10.0.0_r41

./ReRepoSync.sh










################################### android-11.0.0_r46 ###################################

mkdir android-11.0.0_r46 && cd android-11.0.0_r46

mkdir .repo && cp -r ../android-9.0.0_r57/.repo/repo ./.repo/ && cp ../android-9.0.0_r57/ReRepoSync.sh ./

repo init -u https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest -b android-11.0.0_r46

./ReRepoSync.sh










################################### android-13.0.0_r78 ###################################

mkdir android-13.0.0_r78 && cd android-13.0.0_r78



vim ReRepoSync.sh
--------------------------- ReRepoSync.sh ----------------------------
#!/bin/sh

count=0

./repo sync --force-sync --current-branch -j 4


while [ $? -ne 0 ] 

do

    count=`expr $count + 1`
    echo "---------- try repo sync again ${count} -------------"

    ./repo sync --force-sync --current-branch -j 4

done
--------------------------- ReRepoSync.sh ----------------------------
chmod a+x ReRepoSync.sh



repo init -u https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest -b android-13.0.0_r78
.repo/repo/repo --version  # 注意 python 版本要 3.XX 的 (可用 sudo update-alternatives --config python 切换)
cp .repo/repo/repo ./repo

./ReRepoSync.sh

# 毫无意外, sync 成功完成。

source build/envsetup.sh

lunch sdk_phone_x86_64
# 可以看看 lunch 的输出菜单, 但别仅信它, 之前用 sdk_pc_x86_64-userdebug 尝试了结果 emulator 命令出一个大屏也进入不了系统

m -j8

# 毫无意外, compile 成功完成。


cd out/target/product/emulator_x86_64/
ls -al

---------------------- KVM ----------------------
# https://help.ubuntu.com/community/KVM/Installation 

# https://developer.android.com/studio/run/emulator-acceleration?utm_source=android-studio#vm-linux
$ sudo apt-get install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
$ groups ; sudo adduser `id -un` kvm ; sudo adduser `id -un` libvirtd 
$ ls -l /dev/kvm ; # sudo chown root:libvirtd /dev/kvm , if needed
---------------------- KVM ----------------------



which emulator
emulator    
# OK, 成功打开
# 注意 emulator 命令要的是 prebuilts/ 下面的, 执行 source & lunch 选择后会改变 环境变量 把 emulator 指向 prebuilts/ 下的了

# emulator -list-avds
# ./prebuilts/android-emulator/linux-x86_64/emulator -list-avds
# emulator -help  # 查看一下, 发现可以指定 -k 来指定 kernel 路径




# 打包 模拟器 zip 包
make emu_img_zip




# 方便使用, 写在一起:

source build/envsetup.sh ; lunch sdk_phone_x86_64 ; m -j8  # 编译给模拟器使用

source build/envsetup.sh ; lunch aosp_cf_x86_64_phone-userdebug ; m -j8  # 编译给Cuttlefish使用











################################### android-12.1.0_r11 ###################################

mkdir android-12.1.0_r11 && cd android-12.1.0_r11


repo init -u https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest -b android-12.1.0_r11
.repo/repo/repo --version  # 注意 python 版本要 3.XX 的 (可用 sudo update-alternatives --config python 切换)
cp .repo/repo/repo ./repo


cp ../android-13.0.0_r78/ReRepoSync.sh ./
./ReRepoSync.sh


# 无意外，sync 成功完成。


source build/envsetup.sh


-------------- failed try --------------
lunch aosp_x86_64-eng  # 用下面 lunch sdk_phone_x86_64 的, 这个没有 userdata.img 编译出来
m -j8
cd out/target/product/generic_x86_64/
emulator   # 发现没有 userdata-qemu.img 编译出来， 再试一下下面的
-------------- failed try --------------


lunch sdk_phone_x86_64
m -j8
cd out/target/product/emulator_x86_64/
emulator   # OK, 成功打开





source build/envsetup.sh ; lunch aosp_cf_x86_64_phone-userdebug ; m -j${nproc}
# 奇怪的是生成的是 out/target/product/vsoc_arm64, 而 launch_cvd --start_webrtc=true 需要的是 out/target/product/vsoc_x86_64/boot.img

# 那就试试 pc 那个吧, 在它 make 过程中 ls out/target/product/ 确实多了个正确的出来 :) :
source build/envsetup.sh ; lunch aosp_cf_x86_64_pc-userdebug ; m 

launch_cvd --start_webrtc=true
# 编译完成后执行，还是有错误， TODO .....
